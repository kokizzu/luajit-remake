diff --git a/llvm/include/llvm/CodeGen/MachineFunction.h b/llvm/include/llvm/CodeGen/MachineFunction.h
index 6e7292abe..825b3c962 100644
--- a/llvm/include/llvm/CodeGen/MachineFunction.h
+++ b/llvm/include/llvm/CodeGen/MachineFunction.h
@@ -484,6 +484,8 @@ public:
   struct CallSiteInfo {
     /// Vector of call argument and its forwarding register.
     SmallVector<ArgRegPair, 1> ArgRegPairs;
+    SmallVector<ArgRegPair, 1> RetRegPairs;
+    bool HasRetRegPairsInfo = false;
   };
 
 private:
diff --git a/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp b/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp
index 2297b27ff..8e82129ca 100644
--- a/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp
+++ b/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp
@@ -134,6 +134,10 @@ using namespace llvm;
 
 #define DEBUG_TYPE "asm-printer"
 
+static cl::opt<bool>
+    AddIndirectBranchDestAnnotationForDeegen("add-indirect-branch-dest-annotation-for-deegen", cl::init(false), cl::Hidden,
+                                             cl::desc("Add destination annotations to indirect branches for Deegen"));
+
 // This is a replication of fields of object::PGOAnalysisMap::Features. It
 // should match the order of the fields so that
 // `object::PGOAnalysisMap::Features::decode(PgoAnalysisMapFeatures.getBits())`
@@ -1743,6 +1747,76 @@ void AsmPrinter::emitFunctionBody() {
       if (isVerbose())
         emitComments(MI, OutStreamer->getCommentOS());
 
+      if (AddIndirectBranchDestAnnotationForDeegen)
+      {
+          const TargetInstrInfo* TII = MF->getSubtarget().getInstrInfo();
+          if (TII->isTailCall(MI))
+          {
+              OutStreamer->AddComment("__deegen_asm_annotation_tailcall");
+          }
+          else
+          {
+              int jumpTableIndex = TII->getJumpTableIndex(MI);
+              if (jumpTableIndex != -1)
+              {
+                  const std::vector<MachineJumpTableEntry>& jumpTables = MF->getJumpTableInfo()->getJumpTables();
+                  if (jumpTableIndex < 0 || static_cast<size_t>(jumpTableIndex) >= jumpTables.size())
+                  {
+                      fprintf(stderr, "Deegen AsmPrinter hack: Bad jump table index!\n");
+                      abort();
+                  }
+                  std::string annotationText = "__deegen_asm_annotation_indirectbr{";
+                  for (MachineBasicBlock* possibleDestMBB : jumpTables[jumpTableIndex].MBBs)
+                  {
+                      annotationText += possibleDestMBB->getSymbol()->getName().str() + ",";
+                  }
+                  annotationText += "}";
+                  OutStreamer->AddComment(annotationText);
+              }
+              if (MI.isCall()) 
+              {
+                  const auto& callSiteInfoMap = MF->getCallSitesInfo();
+                  auto it = callSiteInfoMap.find(&MI);
+                  if (it != callSiteInfoMap.end())
+                  {
+                      std::string annotationText = "__deegen_asm_annotation_call{";
+                      const TargetRegisterInfo* TRI = MF->getSubtarget().getRegisterInfo();
+                      {
+                          annotationText += "arg_regs[";
+                          for (const MachineFunction::ArgRegPair& argReg : it->second.ArgRegPairs) 
+                          {
+                              Register reg = argReg.Reg;
+                              if (!reg.isPhysical())
+                              {
+                                  fprintf(stderr, "Deegen AsmPrinter hack: Call reg is not physical!\n");
+                                  abort();
+                              }
+                              annotationText += std::string(TRI->getName(reg.asMCReg())) + ",";
+                          }
+                          annotationText += "]";
+                      }
+                      if (it->second.HasRetRegPairsInfo)
+                      {
+                          annotationText += "ret_regs[";
+                          for (const MachineFunction::ArgRegPair& argReg : it->second.RetRegPairs) 
+                          {
+                              Register reg = argReg.Reg;
+                              if (!reg.isPhysical())
+                              {
+                                  fprintf(stderr, "Deegen AsmPrinter hack: Call ret reg is not physical!\n");
+                                  abort();
+                              }
+                              annotationText += std::string(TRI->getName(reg.asMCReg())) + ",";
+                          }
+                          annotationText += "]";
+                      }
+                      annotationText += "}";
+                      OutStreamer->AddComment(annotationText);
+                  }
+              }
+          }
+      }
+
       switch (MI.getOpcode()) {
       case TargetOpcode::CFI_INSTRUCTION:
         emitCFIInstruction(MI);
diff --git a/llvm/lib/Target/X86/X86CallingConv.td b/llvm/lib/Target/X86/X86CallingConv.td
index 9ec68bfb8..ca822bedb 100644
--- a/llvm/lib/Target/X86/X86CallingConv.td
+++ b/llvm/lib/Target/X86/X86CallingConv.td
@@ -715,7 +715,7 @@ def CC_X86_64_GHC : CallingConv<[
 
   // Pass in STG registers: Base, Sp, Hp, R1, R2, R3, R4, R5, R6, SpLim
   CCIfType<[i64],
-            CCAssignToReg<[R13, RBP, R12, RBX, R14, RSI, RDI, R8, R9, R15]>>,
+            CCAssignToReg<[R13, RBP, R12, RBX, R14, RSI, RDI, R8, R9, R15, R10, R11, RDX]>>,
 
   // Pass in STG registers: F1, F2, F3, F4, D1, D2
   CCIfType<[f32, f64, v16i8, v8i16, v4i32, v2i64, v4f32, v2f64],
@@ -1174,10 +1174,10 @@ def CSR_64_RT_MostRegs : CalleeSavedRegs<(add CSR_64, RAX, RCX, RDX, RSI, RDI,
 def CSR_Win64_RT_MostRegs : CalleeSavedRegs<(add CSR_64_RT_MostRegs,
                                                  (sequence "XMM%u", 6, 15))>;
 
-// All registers - except r11 and return registers.
-def CSR_64_RT_AllRegs     : CalleeSavedRegs<(add CSR_64_RT_MostRegs,
+// All registers - except return registers.
+def CSR_64_RT_AllRegs     : CalleeSavedRegs<(add CSR_64_RT_MostRegs, R11,
                                                  (sequence "XMM%u", 0, 15))>;
-def CSR_64_RT_AllRegs_AVX : CalleeSavedRegs<(add CSR_64_RT_MostRegs,
+def CSR_64_RT_AllRegs_AVX : CalleeSavedRegs<(add CSR_64_RT_MostRegs, R11,
                                                  (sequence "YMM%u", 0, 15))>;
 
 def CSR_64_MostRegs : CalleeSavedRegs<(add RBX, RCX, RDX, RSI, RDI, R8, R9, R10,
diff --git a/llvm/lib/Target/X86/X86ISelLoweringCall.cpp b/llvm/lib/Target/X86/X86ISelLoweringCall.cpp
index f659c168b..f0eeb1d14 100644
--- a/llvm/lib/Target/X86/X86ISelLoweringCall.cpp
+++ b/llvm/lib/Target/X86/X86ISelLoweringCall.cpp
@@ -2543,6 +2543,22 @@ X86TargetLowering::LowerCall(TargetLowering::CallLoweringInfo &CLI,
 
   InGlue = Chain.getValue(1);
   DAG.addNoMergeSiteInfo(Chain.getNode(), CLI.NoMerge);
+  
+  if (DAG.getTarget().Options.EmitCallSiteInfo)
+  {
+    CSInfo.HasRetRegPairsInfo = true;
+    SmallVector<CCValAssign, 16> RVLocs;
+    CCState CCInfoRet(CallConv, isVarArg, MF, RVLocs, *DAG.getContext());
+    CCInfoRet.AnalyzeCallResult(Ins, RetCC_X86);
+    for (unsigned I = 0, E = RVLocs.size(); I != E; ++I) 
+    {
+      CCValAssign &VA = RVLocs[I];
+      if (VA.isRegLoc()) 
+      {
+        CSInfo.RetRegPairs.emplace_back(VA.getLocReg(), I);
+      }
+    }
+  }
   DAG.addCallSiteInfo(Chain.getNode(), std::move(CSInfo));
 
   // Save heapallocsite metadata.
