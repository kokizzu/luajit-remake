diff --git a/llvm/include/llvm/Transforms/Scalar/JumpThreading.h b/llvm/include/llvm/Transforms/Scalar/JumpThreading.h
index a3f2ce23f..a0c653022 100644
--- a/llvm/include/llvm/Transforms/Scalar/JumpThreading.h
+++ b/llvm/include/llvm/Transforms/Scalar/JumpThreading.h
@@ -77,16 +77,14 @@ enum ConstantPreference { WantInteger, WantBlockAddress };
 /// In this case, the unconditional branch at the end of the first if can be
 /// revectored to the false side of the second if.
 class JumpThreadingPass : public PassInfoMixin<JumpThreadingPass> {
-  Function *F = nullptr;
-  FunctionAnalysisManager *FAM = nullptr;
-  TargetLibraryInfo *TLI = nullptr;
-  TargetTransformInfo *TTI = nullptr;
-  LazyValueInfo *LVI = nullptr;
-  AAResults *AA = nullptr;
-  std::unique_ptr<DomTreeUpdater> DTU;
-  std::optional<BlockFrequencyInfo *> BFI;
-  std::optional<BranchProbabilityInfo *> BPI;
-  bool ChangedSinceLastAnalysisUpdate = false;
+  TargetLibraryInfo *TLI;
+  TargetTransformInfo *TTI;
+  LazyValueInfo *LVI;
+  AAResults *AA;
+  DomTreeUpdater *DTU;
+  std::unique_ptr<BlockFrequencyInfo> BFI;
+  std::unique_ptr<BranchProbabilityInfo> BPI;
+  bool HasProfileData = false;
   bool HasGuards = false;
 #ifndef LLVM_ENABLE_ABI_BREAKING_CHECKS
   SmallPtrSet<const BasicBlock *, 16> LoopHeaders;
@@ -101,16 +99,13 @@ public:
   JumpThreadingPass(int T = -1);
 
   // Glue for old PM.
-  bool runImpl(Function &F, FunctionAnalysisManager *FAM,
-               TargetLibraryInfo *TLI, TargetTransformInfo *TTI,
-               LazyValueInfo *LVI, AAResults *AA,
-               std::unique_ptr<DomTreeUpdater> DTU,
-               std::optional<BlockFrequencyInfo *> BFI,
-               std::optional<BranchProbabilityInfo *> BPI);
+  bool runImpl(Function &F, TargetLibraryInfo *TLI, TargetTransformInfo *TTI,
+               LazyValueInfo *LVI, AAResults *AA, DomTreeUpdater *DTU,
+               bool HasProfileData, std::unique_ptr<BlockFrequencyInfo> BFI,
+               std::unique_ptr<BranchProbabilityInfo> BPI);
 
   PreservedAnalyses run(Function &F, FunctionAnalysisManager &AM);
 
-  DomTreeUpdater *getDomTreeUpdater() const { return DTU.get(); }
   void findLoopHeaders(Function &F);
   bool processBlock(BasicBlock *BB);
   bool maybeMergeBasicBlockIntoOnlyPred(BasicBlock *BB);
@@ -169,41 +164,9 @@ private:
   BasicBlock *splitBlockPreds(BasicBlock *BB, ArrayRef<BasicBlock *> Preds,
                               const char *Suffix);
   void updateBlockFreqAndEdgeWeight(BasicBlock *PredBB, BasicBlock *BB,
-                                    BasicBlock *NewBB, BasicBlock *SuccBB,
-                                    BlockFrequencyInfo *BFI,
-                                    BranchProbabilityInfo *BPI,
-                                    bool HasProfile);
+                                    BasicBlock *NewBB, BasicBlock *SuccBB);
   /// Check if the block has profile metadata for its outgoing edges.
   bool doesBlockHaveProfileData(BasicBlock *BB);
-
-  /// Returns analysis preserved by the pass.
-  PreservedAnalyses getPreservedAnalysis() const;
-
-  /// Helper function to run "external" analysis in the middle of JumpThreading.
-  /// It takes care of updating/invalidating other existing analysis
-  /// before/after  running the "external" one.
-  template <typename AnalysisT>
-  typename AnalysisT::Result *runExternalAnalysis();
-
-  /// Returns an existing instance of BPI if any, otherwise nullptr. By
-  /// "existing" we mean either cached result provided by FunctionAnalysisManger
-  /// or created by preceding call to 'getOrCreateBPI'.
-  BranchProbabilityInfo *getBPI();
-
-  /// Returns an existing instance of BFI if any, otherwise nullptr. By
-  /// "existing" we mean either cached result provided by FunctionAnalysisManger
-  /// or created by preceding call to 'getOrCreateBFI'.
-  BlockFrequencyInfo *getBFI();
-
-  /// Returns an existing instance of BPI if any, otherwise:
-  ///   if 'HasProfile' is true creates new instance through
-  ///   FunctionAnalysisManager, otherwise nullptr.
-  BranchProbabilityInfo *getOrCreateBPI(bool Force = false);
-
-  /// Returns an existing instance of BFI if any, otherwise:
-  ///   if 'HasProfile' is true creates new instance through
-  ///   FunctionAnalysisManager, otherwise nullptr.
-  BlockFrequencyInfo *getOrCreateBFI(bool Force = false);
 };
 
 } // end namespace llvm
diff --git a/llvm/lib/Transforms/Scalar/JumpThreading.cpp b/llvm/lib/Transforms/Scalar/JumpThreading.cpp
index 7a0b661a0..02b976ea8 100644
--- a/llvm/lib/Transforms/Scalar/JumpThreading.cpp
+++ b/llvm/lib/Transforms/Scalar/JumpThreading.cpp
@@ -246,65 +246,57 @@ PreservedAnalyses JumpThreadingPass::run(Function &F,
   auto &AA = AM.getResult<AAManager>(F);
   auto &DT = AM.getResult<DominatorTreeAnalysis>(F);
 
-  bool Changed =
-      runImpl(F, &AM, &TLI, &TTI, &LVI, &AA,
-              std::make_unique<DomTreeUpdater>(
-                  &DT, nullptr, DomTreeUpdater::UpdateStrategy::Lazy),
-              std::nullopt, std::nullopt);
+  DomTreeUpdater DTU(DT, DomTreeUpdater::UpdateStrategy::Lazy);
+  std::unique_ptr<BlockFrequencyInfo> BFI;
+  std::unique_ptr<BranchProbabilityInfo> BPI;
+  if (F.hasProfileData()) {
+    LoopInfo LI{DT};
+    BPI.reset(new BranchProbabilityInfo(F, LI, &TLI));
+    BFI.reset(new BlockFrequencyInfo(F, *BPI, LI));
+  }
+
+  bool Changed = runImpl(F, &TLI, &TTI, &LVI, &AA, &DTU, F.hasProfileData(),
+                         std::move(BFI), std::move(BPI));
 
   if (!Changed)
     return PreservedAnalyses::all();
-
-
-  getDomTreeUpdater()->flush();
-
-#if defined(EXPENSIVE_CHECKS)
-  assert(getDomTreeUpdater()->getDomTree().verify(
-             DominatorTree::VerificationLevel::Full) &&
-         "DT broken after JumpThreading");
-  assert((!getDomTreeUpdater()->hasPostDomTree() ||
-          getDomTreeUpdater()->getPostDomTree().verify(
-              PostDominatorTree::VerificationLevel::Full)) &&
-         "PDT broken after JumpThreading");
-#else
-  assert(getDomTreeUpdater()->getDomTree().verify(
-             DominatorTree::VerificationLevel::Fast) &&
-         "DT broken after JumpThreading");
-  assert((!getDomTreeUpdater()->hasPostDomTree() ||
-          getDomTreeUpdater()->getPostDomTree().verify(
-              PostDominatorTree::VerificationLevel::Fast)) &&
-         "PDT broken after JumpThreading");
-#endif
-
-  return getPreservedAnalysis();
+    
+  PreservedAnalyses PA;
+  PA.preserve<DominatorTreeAnalysis>();
+  PA.preserve<LazyValueAnalysis>();
+  return PA;
 }
 
-bool JumpThreadingPass::runImpl(Function &F_, FunctionAnalysisManager *FAM_,
-                                TargetLibraryInfo *TLI_,
+bool JumpThreadingPass::runImpl(Function &F, TargetLibraryInfo *TLI_,
                                 TargetTransformInfo *TTI_, LazyValueInfo *LVI_,
-                                AliasAnalysis *AA_,
-                                std::unique_ptr<DomTreeUpdater> DTU_,
-                                std::optional<BlockFrequencyInfo *> BFI_,
-                                std::optional<BranchProbabilityInfo *> BPI_) {
-  LLVM_DEBUG(dbgs() << "Jump threading on function '" << F_.getName() << "'\n");
-  F = &F_;
-  FAM = FAM_;
+                                AliasAnalysis *AA_, DomTreeUpdater *DTU_,
+                                bool HasProfileData_,
+                                std::unique_ptr<BlockFrequencyInfo> BFI_,
+                                std::unique_ptr<BranchProbabilityInfo> BPI_) {
+  LLVM_DEBUG(dbgs() << "Jump threading on function '" << F.getName() << "'\n");
   TLI = TLI_;
   TTI = TTI_;
   LVI = LVI_;
   AA = AA_;
-  DTU = std::move(DTU_);
-  BFI = BFI_;
-  BPI = BPI_;
-  auto *GuardDecl = F->getParent()->getFunction(
+  DTU = DTU_;
+  BFI.reset();
+  BPI.reset();
+  // When profile data is available, we need to update edge weights after
+  // successful jump threading, which requires both BPI and BFI being available.
+  HasProfileData = HasProfileData_;
+  auto *GuardDecl = F.getParent()->getFunction(
       Intrinsic::getName(Intrinsic::experimental_guard));
   HasGuards = GuardDecl && !GuardDecl->use_empty();
-
+  if (HasProfileData) {
+    BPI = std::move(BPI_);
+    BFI = std::move(BFI_);
+  }
+  
   // Reduce the number of instructions duplicated when optimizing strictly for
   // size.
   if (BBDuplicateThreshold.getNumOccurrences())
     BBDupThreshold = BBDuplicateThreshold;
-  else if (F->hasFnAttribute(Attribute::MinSize))
+  else if (F.hasFnAttribute(Attribute::MinSize))
     BBDupThreshold = 3;
   else
     BBDupThreshold = DefaultBBDupThreshold;
@@ -315,22 +307,22 @@ bool JumpThreadingPass::runImpl(Function &F_, FunctionAnalysisManager *FAM_,
   assert(DTU && "DTU isn't passed into JumpThreading before using it.");
   assert(DTU->hasDomTree() && "JumpThreading relies on DomTree to proceed.");
   DominatorTree &DT = DTU->getDomTree();
-  for (auto &BB : *F)
+  for (auto &BB : F)
     if (!DT.isReachableFromEntry(&BB))
       Unreachable.insert(&BB);
 
   if (!ThreadAcrossLoopHeaders)
-    findLoopHeaders(*F);
+    findLoopHeaders(F);
 
   bool EverChanged = false;
   bool Changed;
   do {
     Changed = false;
-    for (auto &BB : *F) {
+    for (auto &BB : F) {
       if (Unreachable.count(&BB))
         continue;
       while (processBlock(&BB)) // Thread all of the branches we can over BB.
-        Changed = ChangedSinceLastAnalysisUpdate = true;
+        Changed = true;
 
       // Jump threading may have introduced redundant debug values into BB
       // which should be removed.
@@ -340,7 +332,7 @@ bool JumpThreadingPass::runImpl(Function &F_, FunctionAnalysisManager *FAM_,
       // Stop processing BB if it's the entry or is now deleted. The following
       // routines attempt to eliminate BB and locating a suitable replacement
       // for the entry is non-trivial.
-      if (&BB == &F->getEntryBlock() || DTU->isBBPendingDeletion(&BB))
+      if (&BB == &F.getEntryBlock() || DTU->isBBPendingDeletion(&BB))
         continue;
 
       if (pred_empty(&BB)) {
@@ -351,8 +343,8 @@ bool JumpThreadingPass::runImpl(Function &F_, FunctionAnalysisManager *FAM_,
                           << '\n');
         LoopHeaders.erase(&BB);
         LVI->eraseBlock(&BB);
-        DeleteDeadBlock(&BB, DTU.get());
-        Changed = ChangedSinceLastAnalysisUpdate = true;
+        DeleteDeadBlock(&BB, DTU);
+        Changed = true;
         continue;
       }
 
@@ -367,12 +359,12 @@ bool JumpThreadingPass::runImpl(Function &F_, FunctionAnalysisManager *FAM_,
             // Don't alter Loop headers and latches to ensure another pass can
             // detect and transform nested loops later.
             !LoopHeaders.count(&BB) && !LoopHeaders.count(Succ) &&
-            TryToSimplifyUncondBranchFromEmptyBlock(&BB, DTU.get())) {
+            TryToSimplifyUncondBranchFromEmptyBlock(&BB, DTU)) {
           RemoveRedundantDbgInstrs(Succ);
           // BB is valid for cleanup here because we passed in DTU. F remains
           // BB's parent until a DTU->getDomTree() event.
           LVI->eraseBlock(&BB);
-          Changed = ChangedSinceLastAnalysisUpdate = true;
+          Changed = true;
         }
       }
     }
@@ -1044,8 +1036,8 @@ bool JumpThreadingPass::processBlock(BasicBlock *BB) {
                       << "' folding terminator: " << *BB->getTerminator()
                       << '\n');
     ++NumFolds;
-    ConstantFoldTerminator(BB, true, nullptr, DTU.get());
-    if (auto *BPI = getBPI())
+    ConstantFoldTerminator(BB, true, nullptr, DTU);
+    if (HasProfileData)
       BPI->eraseBlock(BB);
     return true;
   }
@@ -1197,7 +1189,7 @@ bool JumpThreadingPass::processImpliedCondition(BasicBlock *BB) {
         FICond->eraseFromParent();
 
       DTU->applyUpdatesPermissive({{DominatorTree::Delete, BB, RemoveSucc}});
-      if (auto *BPI = getBPI())
+      if (HasProfileData)
         BPI->eraseBlock(BB);
       return true;
     }
@@ -1648,7 +1640,7 @@ bool JumpThreadingPass::processThreadableEdges(Value *Cond, BasicBlock *BB,
       ++NumFolds;
       Term->eraseFromParent();
       DTU->applyUpdatesPermissive(Updates);
-      if (auto *BPI = getBPI())
+      if (HasProfileData)
         BPI->eraseBlock(BB);
 
       // If the condition is now dead due to the removal of the old terminator,
@@ -1901,7 +1893,7 @@ bool JumpThreadingPass::maybeMergeBasicBlockIntoOnlyPred(BasicBlock *BB) {
     LoopHeaders.insert(BB);
 
   LVI->eraseBlock(SinglePred);
-  MergeBasicBlockIntoOnlyPred(BB, DTU.get());
+  MergeBasicBlockIntoOnlyPred(BB, DTU);
 
   // Now that BB is merged into SinglePred (i.e. SinglePred code followed by
   // BB code within one basic block `BB`), we need to invalidate the LVI
@@ -2264,11 +2256,6 @@ void JumpThreadingPass::threadThroughTwoBasicBlocks(BasicBlock *PredPredBB,
   LLVM_DEBUG(dbgs() << "  Threading through '" << PredBB->getName() << "' and '"
                     << BB->getName() << "'\n");
 
-  // Build BPI/BFI before any changes are made to IR.
-  bool HasProfile = doesBlockHaveProfileData(BB);
-  auto *BFI = getOrCreateBFI(HasProfile);
-  auto *BPI = getOrCreateBPI(BFI != nullptr);
-
   BranchInst *CondBr = cast<BranchInst>(BB->getTerminator());
   BranchInst *PredBBBranch = cast<BranchInst>(PredBB->getTerminator());
 
@@ -2278,8 +2265,7 @@ void JumpThreadingPass::threadThroughTwoBasicBlocks(BasicBlock *PredPredBB,
   NewBB->moveAfter(PredBB);
 
   // Set the block frequency of NewBB.
-  if (BFI) {
-    assert(BPI && "It's expected BPI to exist along with BFI");
+  if (HasProfileData) {
     auto NewBBFreq = BFI->getBlockFreq(PredPredBB) *
                      BPI->getEdgeProbability(PredPredBB, PredBB);
     BFI->setBlockFreq(NewBB, NewBBFreq);
@@ -2293,7 +2279,7 @@ void JumpThreadingPass::threadThroughTwoBasicBlocks(BasicBlock *PredPredBB,
                     PredPredBB);
 
   // Copy the edge probabilities from PredBB to NewBB.
-  if (BPI)
+  if (HasProfileData)
     BPI->copyEdgeProbabilities(PredBB, NewBB);
 
   // Update the terminator of PredPredBB to jump to NewBB instead of PredBB.
@@ -2377,11 +2363,6 @@ void JumpThreadingPass::threadEdge(BasicBlock *BB,
   assert(!LoopHeaders.count(BB) && !LoopHeaders.count(SuccBB) &&
          "Don't thread across loop headers");
 
-  // Build BPI/BFI before any changes are made to IR.
-  bool HasProfile = doesBlockHaveProfileData(BB);
-  auto *BFI = getOrCreateBFI(HasProfile);
-  auto *BPI = getOrCreateBPI(BFI != nullptr);
-
   // And finally, do it!  Start by factoring the predecessors if needed.
   BasicBlock *PredBB;
   if (PredBBs.size() == 1)
@@ -2405,8 +2386,7 @@ void JumpThreadingPass::threadEdge(BasicBlock *BB,
   NewBB->moveAfter(PredBB);
 
   // Set the block frequency of NewBB.
-  if (BFI) {
-    assert(BPI && "It's expected BPI to exist along with BFI");
+  if (HasProfileData) {
     auto NewBBFreq =
         BFI->getBlockFreq(PredBB) * BPI->getEdgeProbability(PredBB, BB);
     BFI->setBlockFreq(NewBB, NewBBFreq);
@@ -2449,7 +2429,7 @@ void JumpThreadingPass::threadEdge(BasicBlock *BB,
   SimplifyInstructionsInBlock(NewBB, TLI);
 
   // Update the edge weight from BB to SuccBB, which should be less than before.
-  updateBlockFreqAndEdgeWeight(PredBB, BB, NewBB, SuccBB, BFI, BPI, HasProfile);
+  updateBlockFreqAndEdgeWeight(PredBB, BB, NewBB, SuccBB);
 
   // Threaded an edge!
   ++NumThreads;
@@ -2466,13 +2446,10 @@ BasicBlock *JumpThreadingPass::splitBlockPreds(BasicBlock *BB,
   // Collect the frequencies of all predecessors of BB, which will be used to
   // update the edge weight of the result of splitting predecessors.
   DenseMap<BasicBlock *, BlockFrequency> FreqMap;
-  auto *BFI = getBFI();
-  if (BFI) {
-    auto *BPI = getOrCreateBPI(true);
+  if (HasProfileData)
     for (auto *Pred : Preds)
       FreqMap.insert(std::make_pair(
           Pred, BFI->getBlockFreq(Pred) * BPI->getEdgeProbability(Pred, BB)));
-  }
 
   // In the case when BB is a LandingPad block we create 2 new predecessors
   // instead of just one.
@@ -2491,10 +2468,10 @@ BasicBlock *JumpThreadingPass::splitBlockPreds(BasicBlock *BB,
     for (auto *Pred : predecessors(NewBB)) {
       Updates.push_back({DominatorTree::Delete, Pred, BB});
       Updates.push_back({DominatorTree::Insert, Pred, NewBB});
-      if (BFI) // Update frequencies between Pred -> NewBB.
+      if (HasProfileData) // Update frequencies between Pred -> NewBB.
         NewBBFreq += FreqMap.lookup(Pred);
     }
-    if (BFI) // Apply the summed frequency to NewBB.
+    if (HasProfileData) // Apply the summed frequency to NewBB.
       BFI->setBlockFreq(NewBB, NewBBFreq);
   }
 
@@ -2504,8 +2481,7 @@ BasicBlock *JumpThreadingPass::splitBlockPreds(BasicBlock *BB,
 
 bool JumpThreadingPass::doesBlockHaveProfileData(BasicBlock *BB) {
   const Instruction *TI = BB->getTerminator();
-  if (!TI || TI->getNumSuccessors() < 2)
-    return false;
+  assert(TI->getNumSuccessors() > 1 && "not a split");
 
   return hasValidBranchWeightMD(*TI);
 }
@@ -2516,18 +2492,11 @@ bool JumpThreadingPass::doesBlockHaveProfileData(BasicBlock *BB) {
 void JumpThreadingPass::updateBlockFreqAndEdgeWeight(BasicBlock *PredBB,
                                                      BasicBlock *BB,
                                                      BasicBlock *NewBB,
-                                                     BasicBlock *SuccBB,
-                                                     BlockFrequencyInfo *BFI,
-                                                     BranchProbabilityInfo *BPI,
-                                                     bool HasProfile) {
-  assert(((BFI && BPI) || (!BFI && !BFI)) &&
-         "Both BFI & BPI should either be set or unset");
-
-  if (!BFI) {
-    assert(!HasProfile &&
-           "It's expected to have BFI/BPI when profile info exists");
+                                                     BasicBlock *SuccBB) {
+  if (!HasProfileData)
     return;
-  }
+  assert(BFI && BPI && "BFI & BPI should have been created here");
+
 
   // As the edge from PredBB to BB is deleted, we have to update the block
   // frequency of BB.
@@ -2599,7 +2568,7 @@ void JumpThreadingPass::updateBlockFreqAndEdgeWeight(BasicBlock *PredBB,
   // FIXME this locally as well so that BPI and BFI are consistent as well.  We
   // shouldn't make edges extremely likely or unlikely based solely on static
   // estimation.
-  if (BBSuccProbs.size() >= 2 && HasProfile) {
+  if (BBSuccProbs.size() >= 2 && doesBlockHaveProfileData(BB)) {
     SmallVector<uint32_t, 4> Weights;
     for (auto Prob : BBSuccProbs)
       Weights.push_back(Prob.getNumerator());
@@ -2737,7 +2706,7 @@ bool JumpThreadingPass::duplicateCondBranchOnPHIIntoPred(
 
   // Remove the unconditional branch at the end of the PredBB block.
   OldPredBranch->eraseFromParent();
-  if (auto *BPI = getBPI())
+  if (HasProfileData)
     BPI->copyEdgeProbabilities(BB, PredBB);
   DTU->applyUpdatesPermissive(Updates);
 
@@ -2775,29 +2744,20 @@ void JumpThreadingPass::unfoldSelectInstr(BasicBlock *Pred, BasicBlock *BB,
   SIUse->setIncomingValue(Idx, SI->getFalseValue());
   SIUse->addIncoming(SI->getTrueValue(), NewBB);
 
-  uint64_t TrueWeight = 1;
-  uint64_t FalseWeight = 1;
-  // Copy probabilities from 'SI' to created conditional branch in 'Pred'.
-  if (extractBranchWeights(*SI, TrueWeight, FalseWeight) &&
-      (TrueWeight + FalseWeight) != 0) {
-    SmallVector<BranchProbability, 2> BP;
-    BP.emplace_back(BranchProbability::getBranchProbability(
-        TrueWeight, TrueWeight + FalseWeight));
-    BP.emplace_back(BranchProbability::getBranchProbability(
-        FalseWeight, TrueWeight + FalseWeight));
-    // Update BPI if exists.
-    if (auto *BPI = getBPI())
-      BPI->setEdgeProbability(Pred, BP);
-  }
   // Set the block frequency of NewBB.
-  if (auto *BFI = getBFI()) {
-    if ((TrueWeight + FalseWeight) == 0) {
-      TrueWeight = 1;
-      FalseWeight = 1;
+  if (HasProfileData) {
+    uint64_t TrueWeight, FalseWeight;
+    if (extractBranchWeights(*SI, TrueWeight, FalseWeight) &&
+        (TrueWeight + FalseWeight) != 0) {
+      SmallVector<BranchProbability, 2> BP;
+      BP.emplace_back(BranchProbability::getBranchProbability(
+          TrueWeight, TrueWeight + FalseWeight));
+      BP.emplace_back(BranchProbability::getBranchProbability(
+          FalseWeight, TrueWeight + FalseWeight));
+      BPI->setEdgeProbability(Pred, BP);
     }
-    BranchProbability PredToNewBBProb = BranchProbability::getBranchProbability(
-        TrueWeight, TrueWeight + FalseWeight);
-    auto NewBBFreq = BFI->getBlockFreq(Pred) * PredToNewBBProb;
+    auto NewBBFreq =
+        BFI->getBlockFreq(Pred) * BPI->getEdgeProbability(Pred, NewBB);
     BFI->setBlockFreq(NewBB, NewBBFreq);
   }
 
@@ -3122,92 +3082,3 @@ bool JumpThreadingPass::threadGuard(BasicBlock *BB, IntrinsicInst *Guard,
   return true;
 }
 
-PreservedAnalyses JumpThreadingPass::getPreservedAnalysis() const {
-  PreservedAnalyses PA;
-  PA.preserve<LazyValueAnalysis>();
-  PA.preserve<DominatorTreeAnalysis>();
-
-  // TODO: We would like to preserve BPI/BFI. Enable once all paths update them.
-  // TODO: Would be nice to verify BPI/BFI consistency as well.
-  return PA;
-}
-
-template <typename AnalysisT>
-typename AnalysisT::Result *JumpThreadingPass::runExternalAnalysis() {
-  assert(FAM && "Can't run external analysis without FunctionAnalysisManager");
-
-  // If there were no changes since last call to 'runExternalAnalysis' then all
-  // analysis is either up to date or explicitly invalidated. Just go ahead and
-  // run the "external" analysis.
-  if (!ChangedSinceLastAnalysisUpdate) {
-    assert(!DTU->hasPendingUpdates() &&
-           "Lost update of 'ChangedSinceLastAnalysisUpdate'?");
-    // Run the "external" analysis.
-    return &FAM->getResult<AnalysisT>(*F);
-  }
-  ChangedSinceLastAnalysisUpdate = false;
-
-  auto PA = getPreservedAnalysis();
-  // TODO: This shouldn't be needed once 'getPreservedAnalysis' reports BPI/BFI
-  // as preserved.
-  PA.preserve<BranchProbabilityAnalysis>();
-  PA.preserve<BlockFrequencyAnalysis>();
-  // Report everything except explicitly preserved as invalid.
-  FAM->invalidate(*F, PA);
-  // Update DT/PDT.
-  DTU->flush();
-  // Make sure DT/PDT are valid before running "external" analysis.
-  assert(DTU->getDomTree().verify(DominatorTree::VerificationLevel::Fast));
-  assert((!DTU->hasPostDomTree() ||
-          DTU->getPostDomTree().verify(
-              PostDominatorTree::VerificationLevel::Fast)));
-  // Run the "external" analysis.
-  auto *Result = &FAM->getResult<AnalysisT>(*F);
-  // Update analysis JumpThreading depends on and not explicitly preserved.
-  TTI = &FAM->getResult<TargetIRAnalysis>(*F);
-  TLI = &FAM->getResult<TargetLibraryAnalysis>(*F);
-  AA = &FAM->getResult<AAManager>(*F);
-
-  return Result;
-}
-
-BranchProbabilityInfo *JumpThreadingPass::getBPI() {
-  if (!BPI) {
-    assert(FAM && "Can't create BPI without FunctionAnalysisManager");
-    BPI = FAM->getCachedResult<BranchProbabilityAnalysis>(*F);
-  }
-  return *BPI;
-}
-
-BlockFrequencyInfo *JumpThreadingPass::getBFI() {
-  if (!BFI) {
-    assert(FAM && "Can't create BFI without FunctionAnalysisManager");
-    BFI = FAM->getCachedResult<BlockFrequencyAnalysis>(*F);
-  }
-  return *BFI;
-}
-
-// Important note on validity of BPI/BFI. JumpThreading tries to preserve
-// BPI/BFI as it goes. Thus if cached instance exists it will be updated.
-// Otherwise, new instance of BPI/BFI is created (up to date by definition).
-BranchProbabilityInfo *JumpThreadingPass::getOrCreateBPI(bool Force) {
-  auto *Res = getBPI();
-  if (Res)
-    return Res;
-
-  if (Force)
-    BPI = runExternalAnalysis<BranchProbabilityAnalysis>();
-
-  return *BPI;
-}
-
-BlockFrequencyInfo *JumpThreadingPass::getOrCreateBFI(bool Force) {
-  auto *Res = getBFI();
-  if (Res)
-    return Res;
-
-  if (Force)
-    BFI = runExternalAnalysis<BlockFrequencyAnalysis>();
-
-  return *BFI;
-}
