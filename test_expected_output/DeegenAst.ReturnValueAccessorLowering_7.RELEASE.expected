; ModuleID = 'extracted_ir'
source_filename = "/home/u/project/annotated/unit_test/return_value_accessor_api_lowering.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__deegen_interpreter_dispatch_table = external dso_local local_unnamed_addr constant [0 x ptr], align 8

; Function Attrs: nounwind
define dso_local ghccc void @__deegen_interpreter_op_test7_0_retcont_0(i64 %0, ptr nocapture readnone %1, i64 %2, ptr nocapture readonly %3, ptr nocapture readnone %4, ptr nocapture readonly %retStart, i64 %numRet, i64 %5, i64 %6, ptr %coroutineCtx, i64 %7, i64 %8, ptr nocapture readnone %9, double %10, double %11, double %12, double %13, double %14, double %15) #0 section "deegen_interpreter_code_section_hot" {
  %17 = getelementptr inbounds i8, ptr %3, i64 -24
  %18 = load ptr, ptr %17, align 8, !tbaa !2
  %19 = getelementptr inbounds i8, ptr %3, i64 -8
  %20 = load i32, ptr %19, align 4, !tbaa !9
  %21 = zext i32 %20 to i64
  %22 = load ptr, ptr addrspace(256) null, align 4294967296, !tbaa !10
  %23 = ptrtoint ptr %22 to i64
  %24 = add i64 %23, %21
  %25 = inttoptr i64 %24 to ptr
  %26 = getelementptr inbounds i8, ptr %18, i64 -32
  %27 = load ptr addrspace(256), ptr %26, align 8, !tbaa !11
  %.sroa.0.0.copyload.i = load i32, ptr addrspace(256) %27, align 1, !tbaa !12
  %28 = zext i32 %.sroa.0.0.copyload.i to i64
  %29 = add i64 %28, %23
  %30 = inttoptr i64 %29 to ptr
  %31 = tail call noundef ptr @_Z2d1v() #3
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %31, ptr align 1 %retStart, i64 16, i1 false)
  %32 = getelementptr inbounds i8, ptr %25, i64 6
  %33 = load i16, ptr %32, align 1
  %34 = zext i16 %33 to i64
  %35 = getelementptr inbounds [0 x ptr], ptr @__deegen_interpreter_dispatch_table, i64 0, i64 %34
  %36 = load ptr, ptr %35, align 8
  musttail call ghccc void %36(i64 %0, ptr %30, i64 %2, ptr %18, ptr nonnull %32, ptr undef, i64 undef, i64 undef, i64 undef, ptr %coroutineCtx, i64 undef, i64 undef, ptr undef, double undef, double undef, double undef, double undef, double undef, double undef) #3
  ret void
}

declare dso_local noundef ptr @_Z2d1v() local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.inline.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nounwind "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+cmov,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #1 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+cmov,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #2 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { nounwind }

!llvm.linker.options = !{}
!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 2}
!2 = !{!3, !4, i64 8}
!3 = !{!"_ZTS16StackFrameHeader", !4, i64 0, !4, i64 8, !4, i64 16, !7, i64 24, !8, i64 28}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!"_ZTS17SystemHeapPointerIhE", !8, i64 0}
!8 = !{!"int", !5, i64 0}
!9 = !{!7, !8, i64 0}
!10 = !{!4, !4, i64 0}
!11 = !{!3, !4, i64 0}
!12 = !{!5, !5, i64 0}
